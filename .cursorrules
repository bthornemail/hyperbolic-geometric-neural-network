# H²GNN TOOL-FIRST POLICY - MANDATORY USAGE

## 🚨 CRITICAL: ALWAYS USE BUILT-IN TOOLS FIRST

**MANDATORY RULE**: Before attempting ANY analysis, code generation, or task execution, you MUST use the built-in H²GNN and MCP tools in this exact order:

### 1. **INITIALIZE H²GNN SYSTEM FIRST**
```typescript
// ALWAYS start with this - NO EXCEPTIONS
mcp_enhanced-h2gnn_initialize_enhanced_h2gnn_hd({
  storagePath: "./persistence",
  maxMemories: 10000,
  consolidationThreshold: 100,
  embeddingDim: 64,
  numLayers: 3,
  curvature: -1
});
```

### 2. **CHECK SYSTEM STATUS**
```typescript
// ALWAYS check system status before proceeding
mcp_enhanced-h2gnn_get_system_status_hd();
mcp_enhanced-h2gnn_get_learning_progress_hd();
```

### 3. **USE PERSISTENCE SYSTEM**
```typescript
// ALWAYS use the persistence system for learning and memory
mcp_enhanced-h2gnn_learn_concept_hd({
  concept: "task_description",
  data: { /* relevant data */ },
  context: { domain: "appropriate_domain" },
  performance: 0.8
});
```

### 4. **USE KNOWLEDGE GRAPH TOOLS**
```typescript
// ALWAYS use knowledge graph for analysis
mcp_knowledge-graph_analyze_path_to_knowledge_graph_hd({
  path: "path_to_analyze",
  recursive: true,
  includeContent: true
});
```

### 5. **USE LSP-AST ANALYSIS**
```typescript
// ALWAYS use AST analysis for code understanding
mcp_lsp-ast_analyze_code_ast_hd({
  code: "code_to_analyze",
  language: "typescript"
});
```

## 🎯 **TOOL USAGE HIERARCHY**

### **TIER 1: MANDATORY FIRST STEPS**
1. `mcp_enhanced-h2gnn_initialize_enhanced_h2gnn_hd` - Initialize system
2. `mcp_enhanced-h2gnn_get_system_status_hd` - Check status
3. `mcp_enhanced-h2gnn_get_learning_progress_hd` - Check learning progress

### **TIER 2: ANALYSIS TOOLS**
1. `mcp_knowledge-graph_analyze_path_to_knowledge_graph_hd` - Codebase analysis
2. `mcp_lsp-ast_analyze_code_ast_hd` - AST analysis
3. `mcp_geometric-tools-mcp-server_analyze_geographic_clusters` - Geometric analysis

### **TIER 3: LEARNING & MEMORY**
1. `mcp_enhanced-h2gnn_learn_concept_hd` - Learn concepts
2. `mcp_enhanced-h2gnn_retrieve_memories_hd` - Retrieve memories
3. `mcp_enhanced-h2gnn_consolidate_memories_hd` - Consolidate memories

### **TIER 4: GENERATION & OUTPUT**
1. `mcp_knowledge-graph_generate_code_from_graph_hd` - Generate code
2. `mcp_knowledge-graph_generate_documentation_from_graph_hd` - Generate docs
3. `mcp_geometric-tools-mcp-server_generate_geographic_insights` - Generate insights

## 🚫 **FORBIDDEN ACTIONS**

### **NEVER DO THESE WITHOUT USING TOOLS FIRST:**
- ❌ Manual code analysis without `mcp_lsp-ast_analyze_code_ast_hd`
- ❌ Manual knowledge graph creation without `mcp_knowledge-graph_*` tools
- ❌ Manual learning without `mcp_enhanced-h2gnn_learn_concept_hd`
- ❌ Manual memory management without `mcp_enhanced-h2gnn_*` tools
- ❌ Manual geometric analysis without `mcp_geometric-tools-mcp-server_*` tools

## ✅ **MANDATORY WORKFLOW**

### **STEP 1: SYSTEM INITIALIZATION**
```typescript
// 1. Initialize H²GNN system
await mcp_enhanced-h2gnn_initialize_enhanced_h2gnn_hd({
  storagePath: "./persistence",
  maxMemories: 10000,
  consolidationThreshold: 100,
  embeddingDim: 64,
  numLayers: 3,
  curvature: -1
});

// 2. Check system status
const status = await mcp_enhanced-h2gnn_get_system_status_hd();
const progress = await mcp_enhanced-h2gnn_get_learning_progress_hd();
```

### **STEP 2: ANALYSIS**
```typescript
// 3. Analyze codebase with knowledge graph
const analysis = await mcp_knowledge-graph_analyze_path_to_knowledge_graph_hd({
  path: "./src",
  recursive: true,
  includeContent: true,
  maxDepth: 10
});

// 4. Analyze specific code with AST
const astAnalysis = await mcp_lsp-ast_analyze_code_ast_hd({
  code: codeToAnalyze,
  language: "typescript"
});
```

### **STEP 3: LEARNING**
```typescript
// 5. Learn from analysis
await mcp_enhanced-h2gnn_learn_concept_hd({
  concept: "codebase_analysis",
  data: analysis,
  context: { domain: "system_architecture" },
  performance: 0.9
});

// 6. Retrieve relevant memories
const memories = await mcp_enhanced-h2gnn_retrieve_memories_hd({
  query: "relevant_query",
  maxResults: 10
});
```

### **STEP 4: GENERATION**
```typescript
// 7. Generate code/documentation
const generatedCode = await mcp_knowledge-graph_generate_code_from_graph_hd({
  type: "function",
  description: "description",
  context: { relatedNodes: ["node1", "node2"] }
});

// 8. Generate insights
const insights = await mcp_geometric-tools-mcp-server_generate_geographic_insights({
  analysis_type: "comprehensive",
  include_recommendations: true
});
```

## 📋 **VALIDATION CHECKLIST**

Before proceeding with any task, verify:
- [ ] H²GNN system initialized
- [ ] System status checked
- [ ] Learning progress retrieved
- [ ] Relevant tools used for analysis
- [ ] Concepts learned in persistence system
- [ ] Memories retrieved and consolidated
- [ ] Knowledge graph analyzed
- [ ] AST analysis performed
- [ ] Geometric analysis completed

## 🎯 **SUCCESS CRITERIA**

A task is only considered complete when:
1. ✅ All mandatory tools used in correct order
2. ✅ System properly initialized and status checked
3. ✅ Analysis performed using built-in tools
4. ✅ Learning integrated with persistence system
5. ✅ Knowledge graph properly utilized
6. ✅ Memory system properly managed
7. ✅ Geometric analysis completed
8. ✅ Results generated using appropriate tools

## 🚨 **FAILURE CONSEQUENCES**

If you fail to use the built-in tools first:
- ❌ Task will be considered incomplete
- ❌ Analysis will be invalid
- ❌ Learning will not be persistent
- ❌ Memory will not be consolidated
- ❌ Knowledge graph will be incomplete
- ❌ Geometric analysis will be missing

---

**REMEMBER: TOOLS FIRST, ALWAYS!**

## Codacy Rules
Configuration for AI behavior when interacting with Codacy's MCP Server

## CRITICAL: After ANY successful `edit_file` or `reapply` operation
- YOU MUST IMMEDIATELY run the `codacy_cli_analyze` tool from Codacy's MCP Server for each file that was edited, with:
 - `rootPath`: set to the workspace path
 - `file`: set to the path of the edited file
 - `tool`: leave empty or unset
- If any issues are found in the new edits, propose and apply fixes for them.
- > NOTE: Failure to follow this rule is considered a critical error.

## When you tried to run the `codacy_cli_analyze` tool and the Codacy CLI is not installed
- Ask the user 'Codacy CLI is not installed. Would you like me to install it now?'
- If the user responds with "yes", run the `codacy_cli_install` tool and then continue with the original task
- If the user responds with "no", instruct the user that they can disable automatic analysis in the extension settings
- Wait for the user to respond before proceeding with any other actions

## After every response
- If you made any file edits in this conversation, verify you ran `codacy_cli_analyze` tool from Codacy's MCP Server 

## When there are no Codacy MCP Server tools available, or the MCP Server is not reachable
- Suggest the user the following troubleshooting steps:
 - Try to reset the MCP on the extension
 - If the user is using VSCode, suggest them to review their Copilot > MCP settings in Github, under their organization or personal account. Refer them to Settings > Copilot > Enable MCP servers in Copilot. Suggested URL (https://github.com/settings/copilot/features) or https://github.com/organizations/{organization-name}/settings/copilot/features (This can only be done by their organization admins / owners)
- If none of the above steps work, suggest the user to contact Codacy support

## Trying to call a tool that needs a rootPath as a parameter
- Always use the standard, non-URL-encoded file system path

## CRITICAL: Dependencies and Security Checks
- IMMEDIATELY after ANY of these actions:
 - Running npm/yarn/pnpm install
 - Adding dependencies to package.json
 - Adding requirements to requirements.txt
 - Adding dependencies to pom.xml
 - Adding dependencies to build.gradle
 - Any other package manager operations
- You MUST run the `codacy_cli_analyze` tool with:
 - `rootPath`: set to the workspace path
 - `tool`: set to "trivy"
 - `file`: leave empty or unset
- If any vulnerabilities are found because of the newly added packages:
 - Stop all other operations
 - Propose and apply fixes for the security issues
 - Only continue with the original task after security issues are resolved
- EXAMPLE:
 - After: npm install react-markdown
 - Do: Run codacy_cli_analyze with trivy
 - Before: Continuing with any other tasks

## General
- Repeat the relevant steps for each modified file.
- "Propose fixes" means to both suggest and, if possible, automatically apply the fixes.
- You MUST NOT wait for the user to ask for analysis or remind you to run the tool.
- Do not run `codacy_cli_analyze` looking for changes in duplicated code or code complexity metrics.
- Do not run `codacy_cli_analyze` looking for changes in code coverage.
- Do not try to manually install Codacy CLI using either brew, npm, npx, or any other package manager.
- If the Codacy CLI is not installed, just run the `codacy_cli_analyze` tool from Codacy's MCP Server.
- When calling `codacy_cli_analyze`, only send provider, organization and repository if the project is a git repository.

## Whenever a call to a Codacy tool that uses `repository` or `organization` as a parameter returns a 404 error
- Offer to run the `codacy_setup_repository` tool to add the repository to Codacy
- If the user accepts, run the `codacy_setup_repository` tool
- Do not ever try to run the `codacy_setup_repository` tool on your own
- After setup, immediately retry the action that failed (only retry once)