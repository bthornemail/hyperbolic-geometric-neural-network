{
  "name": "h2gnn-hyperbolic-geometric-neural-network",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "description": "Hyperbolic Geometric Hypergraph Neural Network - Revolutionary AI system for hierarchical learning",
  "keywords": [
    "hyperbolic-geometry",
    "neural-networks",
    "geometric-deep-learning",
    "graph-neural-networks",
    "ai",
    "machine-learning"
  ],
  "scripts": {
    "dev": "cross-env NODE_ENV=development vite --mode development",
    "dev:staging": "cross-env NODE_ENV=staging vite --mode staging",
    "dev:production": "cross-env NODE_ENV=production vite --mode production",
    "build": "vite build",
    "build:development": "cross-env NODE_ENV=development vite build --mode development",
    "build:staging": "cross-env NODE_ENV=staging vite build --mode staging",
    "build:production": "cross-env NODE_ENV=production vite build --mode production",
    "build:analyze": "vite build --mode analyze",
    "build:docker": "docker build -f docker/Dockerfile -t h2gnn:latest .",
    "build:docker:multi": "docker buildx build --platform linux/amd64,linux/arm64 -f docker/Dockerfile -t h2gnn:latest --push .",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "preview": "vite preview",
    "preview:development": "cross-env NODE_ENV=development vite preview --mode development",
    "preview:staging": "cross-env NODE_ENV=staging vite preview --mode staging",
    "preview:production": "cross-env NODE_ENV=production vite preview --mode production",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "test:all": "npm run test",
    "test:ci": "npm run test -- --reporter=verbose --coverage",
    "test:watch": "vitest --watch",
    "test:team-collaboration": "npx jest src/tests/core/shared-learning-database.test.ts src/tests/rules/coding-standard-engine.test.ts src/tests/workflows/team-collaboration-workflow.test.ts src/tests/mcp/team-collaboration-mcp.test.ts src/tests/integration/team-collaboration-e2e.test.ts",
    "test:phase3": "npx tsx src/tests/test-runner.ts",
    "test:phase3:verbose": "npx tsx src/tests/test-runner.ts --verbose",
    "test:phase3:performance": "npx tsx src/tests/test-runner.ts --performance",
    "test:phase3:coverage": "npx tsx src/tests/test-runner.ts --coverage",
    "type-check": "tsc --noEmit",
    "type-check:watch": "tsc --noEmit --watch",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "build:docs": "typedoc src --out docs/api",
    "serve": "vite preview --port 3000",
    "serve:development": "cross-env NODE_ENV=development vite preview --port 3000 --mode development",
    "serve:staging": "cross-env NODE_ENV=staging vite preview --port 3000 --mode staging",
    "serve:production": "cross-env NODE_ENV=production vite preview --port 3000 --mode production",
    "start": "node dist/index.js",
    "start:development": "cross-env NODE_ENV=development node dist/index.js",
    "start:staging": "cross-env NODE_ENV=staging node dist/index.js",
    "start:production": "cross-env NODE_ENV=production node dist/index.js",
    "knowledge:analyze": "tsx src/generation/knowledge-base-cli.ts analyze",
    "knowledge:generate": "tsx src/generation/knowledge-base-cli.ts generate",
    "knowledge:refine": "tsx src/generation/knowledge-base-cli.ts refine",
    "knowledge:export": "tsx src/generation/knowledge-base-cli.ts export",
    "knowledge:stats": "tsx src/generation/knowledge-base-cli.ts stats",
    "knowledge:workflow": "tsx src/generation/knowledge-base-cli.ts workflow",
    "mcp:server": "tsx src/mcp/h2gnn-mcp-server.ts",
    "mcp:server:dev": "cross-env NODE_ENV=development tsx src/mcp/h2gnn-mcp-server.ts",
    "mcp:server:staging": "cross-env NODE_ENV=staging tsx src/mcp/h2gnn-mcp-server.ts",
    "mcp:server:prod": "cross-env NODE_ENV=production tsx src/mcp/h2gnn-mcp-server.ts",
    "mcp:demo": "npx tsx src/demo/mcp-collaboration-demo.ts",
    "mcp:demo:dev": "cross-env NODE_ENV=development npx tsx src/demo/mcp-collaboration-demo.ts",
    "mcp:demo:staging": "cross-env NODE_ENV=staging npx tsx src/demo/mcp-collaboration-demo.ts",
    "mcp:demo:prod": "cross-env NODE_ENV=production npx tsx src/demo/mcp-collaboration-demo.ts",
    "wordnet:demo": "npx tsx src/demo/simple-wordnet-test.ts",
    "code:demo": "npx tsx src/demo/code-embedding-demo.ts",
    "knowledge-graph:demo": "npx tsx src/demo/knowledge-graph-demo.ts",
    "unified:demo": "npx tsx src/demo/unified-system-demo.ts",
    "unified:demo:dev": "cross-env NODE_ENV=development npx tsx src/demo/unified-system-demo.ts",
    "unified:demo:staging": "cross-env NODE_ENV=staging npx tsx src/demo/unified-system-demo.ts",
    "unified:demo:prod": "cross-env NODE_ENV=production npx tsx src/demo/unified-system-demo.ts",
    "demo:all": "npm run wordnet:demo && npm run mcp:demo && npm run code:demo && npm run knowledge-graph:demo && npm run unified:demo",
    "docker:up": "docker-compose -f docker/docker-compose.yml up -d",
    "docker:down": "docker-compose -f docker/docker-compose.yml down",
    "docker:logs": "docker-compose -f docker/docker-compose.yml logs -f",
    "docker:restart": "docker-compose -f docker/docker-compose.yml restart",
    "docker:build": "docker-compose -f docker/docker-compose.yml build",
    "k8s:deploy": "kubectl apply -f k8s/",
    "k8s:delete": "kubectl delete -f k8s/",
    "k8s:status": "kubectl get pods -l app=h2gnn",
    "terraform:init": "cd terraform && terraform init",
    "terraform:plan": "cd terraform && terraform plan",
    "terraform:apply": "cd terraform && terraform apply",
    "terraform:destroy": "cd terraform && terraform destroy",
    "prebuild": "npm run type-check && npm run lint && npm run test:ci",
    "postbuild": "npm run build:docs",
    "prestart": "npm run build:production",
    "clean": "rm -rf dist node_modules/.vite",
    "clean:all": "rm -rf dist node_modules package-lock.json",
    "install:clean": "npm run clean:all && npm install",
    "security:audit": "npm audit",
    "security:fix": "npm audit fix",
    "deps:update": "npm update",
    "deps:check": "npm outdated",
    "size:analyze": "npm run build:analyze && npx vite-bundle-analyzer dist/stats.html",
    "health:check": "curl -f http://localhost:3000/health || exit 1",
    "deploy:staging": "npm run build:staging && npm run docker:build && npm run docker:up",
    "deploy:production": "npm run build:production && npm run docker:build && npm run k8s:deploy",
    "env:check": "node -e \"console.log('Environment:', process.env.NODE_ENV || 'development')\"",
    "env:validate": "node scripts/validate-env.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.18.2",
    "@tailwindcss/postcss": "^4.1.14",
    "lucide-react": "^0.544.0",
    "node-fetch": "^3.3.2",
    "react": "^19.2.0",
    "react-dom": "^19.2.0",
    "readline": "^1.3.0",
    "wordpos": "^2.1.0",
    "zod": "^3.25.76",
    "bip32": "^4.0.0",
    "bip39": "^3.1.0",
    "mqtt": "^5.3.0",
    "ws": "^8.18.0",
    "redis": "^4.6.0",
    "ethers": "^6.8.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.2.0",
    "@types/react-dom": "^19.2.0",
    "@vitejs/plugin-react": "^5.0.4",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^6.1.0",
    "eslint-plugin-react-refresh": "^0.4.23",
    "globals": "^16.4.0",
    "jsdom": "^27.0.0",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "tailwindcss": "^4.1.14",
    "typedoc": "^0.28.13",
    "typescript": "^5.9.3",
    "typescript-eslint": "^8.45.0",
    "vite": "^7.1.8",
    "vitest": "^3.2.4",
    "vite-bundle-analyzer": "^0.7.0",
    "rollup-plugin-visualizer": "^5.9.2",
    "compression-webpack-plugin": "^10.0.0",
    "terser": "^5.24.0",
    "cross-env": "^7.0.3",
    "concurrently": "^8.2.2",
    "nodemon": "^3.0.2",
    "tsx": "^4.7.0"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    }
  },
  "files": [
    "dist"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/The-Pocket/PocketFlow-Typescript.git"
  },
  "keywords": [
    "pocketflow",
    "typescript",
    "llm",
    "ai",
    "framework",
    "workflow",
    "minimalist"
  ],
  "scripts": {
    "build": "tsup",
    "test": "jest",
    "test:watch": "jest --watch",
    "prepublishOnly": "npm run build"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "jest": "^29.7.0",
    "ts-jest": "^29.3.0",
    "tsup": "^8.4.0",
    "typescript": "^5.8.2"
  }
}
