version: '3.8'

services:
  h2gnn-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: h2gnn-app
    ports:
      - "3000:3000"
      - "3001:3001"
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - H2GNN_STORAGE_PATH=/app/storage
      - H2GNN_LOG_LEVEL=info
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    volumes:
      - h2gnn-storage:/app/storage
      - h2gnn-logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - h2gnn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "./healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: h2gnn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - h2gnn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: h2gnn-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=h2gnn
      - POSTGRES_USER=h2gnn
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - h2gnn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U h2gnn"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: h2gnn-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - h2gnn-app
    networks:
      - h2gnn-network
    restart: unless-stopped

  monitoring:
    image: prom/prometheus:latest
    container_name: h2gnn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - h2gnn-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: h2gnn-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - monitoring
    networks:
      - h2gnn-network
    restart: unless-stopped

volumes:
  h2gnn-storage:
    driver: local
  h2gnn-logs:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  h2gnn-network:
    driver: bridge
